# Getting Started
>**Note**: Make sure you have completed the [React Native - Environment Setup](https://reactnative.dev/docs/environment-setup) instructions till "Creating a new application" step, before proceeding.

### For Android
yarn android

### For iOS
yarn ios
This is one way to run your app â€” you can also run it directly from within Android Studio and Xcode respectively.

## Structure

This app is broken into different modules. Each module is broken into the following folders:
- env
- src
  - assets
    - fonts
    - images
  - components
  - navigation
  - screens
  - services
  - store
  - utils
- tokens

## Style Guidelines

- This app using tailwind for style

State Management (store/citiesHistorical.ts)
- this app use zustand for global state management to mange add historical data for each city
- this app use  @tanstack/react-query to handle api requests and axios for fetch data
- all api requests can be founded in (services/endPoints) and the hooks that call request exist in (services/hooks)

## screens
- thia app conatin three screen in (screens folder)
- Home screen conatins cities list and user can add city from this screen 
- this app support fixed cities user only can choose from them
- onSelectCityFunc this function heck if city already exist in the list user cannot dublicate it
- only unique cities names can added
- ach city row implemented in isolated component <CityRow/>

City List Screen (CitiesList.tsx)

This screen displays the list of cities with their current weather information (if available) and allows adding/removing cities and navigating to the details screen:

A FlatList component renders each city with its name, and buttons for viewing details.
rederListRow function: Renders each city item in the list, displaying its name, current weather details (temperature converted to Celsius), and buttons.
onCityNameClickfunc function: Navigates to the CityDetails using navigation.navigate and passes the selected city as a parameter.
onCityHistoryClickfunc function : Navigates to the HistoricalData using navigation.navigate and passes the selected city as a parameter.

City Details Screen (CityDetails.tsx)
This screen is implemented to display the detailed weather information for the selected city, including:

Weather description
Temperature (converted to Celsius)
Humidity
Wind speed

Historical Details Screen (HistoricalData.tsx)
This screen is implemented to display the historical weather information(requests user called befor) for the selected city, including:

## Navigation (App.tsx)

This section uses react-navigation to handle screen transitions:

A NavigationContainer component wraps the application.
A Stack.Navigator manages the stack navigation between two screens:
CitiesList: Displays the list of managed cities.
CityDetails: Displays detailed weather information for the selected city.
HistoricalData: display all historcal requests for each city as a historical data

## Test 
- this app use jest for testing 
- ApiRequest.test.tsx incluses test cases 
 

Additional Notes:
- this example use global state to store data as a session
after user close the app all data will be removed
